// backend/src/scanners/IScanner.ts
import { Findings } from '../models/Findings'; // Assuming Findings model is in ../models/Findings.ts
import { CloudProvider } from '../models/enums/CloudProvider';

// Represents the decrypted credentials specific to a cloud provider.
// The structure of this object will vary depending on the provider.
// e.g., for Azure: { tenantId: string, clientId: string, clientSecret: string }
// e.g., for AWS: { accessKeyId: string, secretAccessKey: string, sessionToken?: string, region: string }
// e.g., for GCP: { type: string, project_id: string, private_key_id: string, private_key: string, ... }
export type DecryptedCloudCredentials = any;

export interface ScanOptions {
  credentials: DecryptedCloudCredentials;
  cloudProvider: CloudProvider;
  target?: string; // e.g., specific project ID for GCP, subscription for Azure, account ID for AWS
  outputDirectory: string; // Directory to store raw scan results from the tool
  policyConfiguration?: any; // Placeholder for future scan policy configurations (e.g., specific checks to run)
  // Add other common options as needed (e.g., specific regions, tags)
}

export interface ScanRunResult {
  success: boolean;
  rawOutputPaths: string[]; // Paths to raw output files (e.g., JSON, CSV from the tool)
  error?: string; // Error message if the scan tool execution failed
  // Potentially add tool-specific metadata if needed
}

export interface ScanParseResult {
  success: boolean;
  findings: Findings[]; // Array of parsed findings compatible with our Findings model
  error?: string; // Error message if parsing failed
}

export interface IScanner {
  toolName: string; // e.g., "Prowler", "CloudSploit", "GCP-SCC"
  supportedProviders: CloudProvider[]; // e.g., [CloudProvider.AWS, CloudProvider.GCP]

  /**
   * Executes the scanning tool.
   * @param options - The options for the scan.
   * @returns A promise that resolves with the paths to the raw output files and success status.
   */
  runScan(options: ScanOptions): Promise<ScanRunResult>;

  /**
   * Parses the raw output from the scanning tool into a standardized Findings format.
   * @param rawOutputPaths - Paths to the raw output files generated by runScan.
   * @param scanId - The ID of the scan record this parsing is for, to associate findings.
   * @returns A promise that resolves with an array of parsed Findings.
   */
  parseOutput(rawOutputPaths: string[], scanId: number): Promise<ScanParseResult>;
}
